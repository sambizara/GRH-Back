// controllers/demandeStage_controller.js
const Stage = require('../models/stage_model');
const User = require('../models/user_model');
const Notification = require('../models/notification_model');

// üîπ Confirmer un stagiaire (par l'encadreur)
exports.confirmerStagiaire = async (req, res) => {
    try {
        const { stageId } = req.params;
        const { theme, competencesRequises, objectifs, commentaires } = req.body;

        console.log("üéØ Donn√©es re√ßues pour confirmation:");
        console.log("- Stage ID:", stageId);
        console.log("- Body:", req.body);
        console.log("- Theme:", theme);
        console.log("- Competences:", competencesRequises);
        console.log("- Objectifs:", objectifs);
        console.log("- Commentaires:", commentaires);

        // V√©rifier que l'utilisateur est un salari√©
        if (req.user.role !== 'SALARIE') {
            return res.status(403).json({
                success: false,
                message: "Acc√®s r√©serv√© aux salari√©s"
            });
        }

        // Validation des donn√©es requises
        if (!theme) {
            return res.status(400).json({
                success: false,
                message: "Le th√®me du stage est obligatoire"
            });
        }

        if (!objectifs || !Array.isArray(objectifs) || objectifs.length === 0) {
            return res.status(400).json({
                success: false,
                message: "Les objectifs du stage sont obligatoires et doivent √™tre un tableau non vide"
            });
        }

        const stage = await Stage.findById(stageId)
            .populate('stagiaire', 'nom prenom email')
            .populate('encadreur', 'nom prenom email');

        if (!stage) {
            return res.status(404).json({
                success: false,
                message: "Stage non trouv√©"
            });
        }

        // V√©rifier que l'utilisateur est bien l'encadreur de ce stage
        if (stage.encadreur._id.toString() !== req.user.id) {
            return res.status(403).json({
                success: false,
                message: "Vous n'√™tes pas l'encadreur de ce stage"
            });
        }

        // V√©rifier que le stage est en attente de confirmation
        if (stage.confirmationEncadreur.statut !== 'en_attente') {
            return res.status(400).json({
                success: false,
                message: "Ce stage a d√©j√† √©t√© trait√©"
            });
        }

        // Mettre √† jour le stage
        stage.confirmationEncadreur.statut = 'confirm√©';
        stage.confirmationEncadreur.dateConfirmation = new Date();
        stage.confirmationEncadreur.commentaires = commentaires || "Stage confirm√© par l'encadreur";
        stage.statut = 'Confirm√©';
        
        // Ajouter les informations suppl√©mentaires
        stage.sujet = theme;
        if (competencesRequises) stage.competencesRequises = competencesRequises;
        stage.objectifs = objectifs;

        await stage.save();

        // Mettre √† jour le statut du stagiaire dans User
        await User.findByIdAndUpdate(stage.stagiaire._id, {
            statutConfirmation: 'confirm√©',
            dateConfirmation: new Date()
        });

        // Notification au stagiaire
        const notificationStagiaire = new Notification({
            user: stage.stagiaire._id,
            type: 'Stage confirm√©',
            message: `Votre stage a √©t√© confirm√© par ${stage.encadreur.prenom} ${stage.encadreur.nom}. Th√®me: ${theme}`
        });
        await notificationStagiaire.save();

        console.log(`‚úÖ Stage ${stageId} confirm√© avec succ√®s`);

        res.status(200).json({
            success: true,
            message: "Stagiaire confirm√© avec succ√®s",
            stage: {
                _id: stage._id,
                stagiaire: stage.stagiaire,
                encadreur: stage.encadreur,
                sujet: stage.sujet,
                statut: stage.statut,
                confirmationEncadreur: stage.confirmationEncadreur
            }
        });

    } catch (error) {
        console.error("‚ùå Erreur confirmation stagiaire:", error);
        res.status(500).json({
            success: false,
            message: "Erreur lors de la confirmation du stagiaire",
            error: error.message
        });
    }
};

// üîπ Rejeter un stagiaire (par l'encadreur)
exports.rejeterStagiaire = async (req, res) => {
    try {
        const { stageId } = req.params;
        const { motifRejet, commentaires } = req.body;

        console.log("üóëÔ∏è Donn√©es re√ßues pour rejet:");
        console.log("- Stage ID:", stageId);
        console.log("- Motif:", motifRejet);
        console.log("- Commentaires:", commentaires);

        if (!motifRejet) {
            return res.status(400).json({
                success: false,
                message: "Le motif du rejet est obligatoire"
            });
        }

        // V√©rifier que l'utilisateur est un salari√©
        if (req.user.role !== 'SALARIE') {
            return res.status(403).json({
                success: false,
                message: "Acc√®s r√©serv√© aux salari√©s"
            });
        }

        const stage = await Stage.findById(stageId)
            .populate('stagiaire', 'nom prenom email')
            .populate('encadreur', 'nom prenom email');

        if (!stage) {
            return res.status(404).json({
                success: false,
                message: "Stage non trouv√©"
            });
        }

        // V√©rifier que l'utilisateur est bien l'encadreur de ce stage
        if (stage.encadreur._id.toString() !== req.user.id) {
            return res.status(403).json({
                success: false,
                message: "Vous n'√™tes pas l'encadreur de ce stage"
            });
        }

        // V√©rifier que le stage est en attente de confirmation
        if (stage.confirmationEncadreur.statut !== 'en_attente') {
            return res.status(400).json({
                success: false,
                message: "Ce stage a d√©j√† √©t√© trait√©"
            });
        }

        // Mettre √† jour le stage
        stage.confirmationEncadreur.statut = 'rejet√©';
        stage.confirmationEncadreur.dateConfirmation = new Date();
        stage.confirmationEncadreur.motifRejet = motifRejet;
        stage.confirmationEncadreur.commentaires = commentaires;
        stage.statut = 'Rejet√©';

        await stage.save();

        // Mettre √† jour le statut du stagiaire dans User
        await User.findByIdAndUpdate(stage.stagiaire._id, {
            statutConfirmation: 'rejet√©',
            dateConfirmation: new Date(),
            motifRejet: motifRejet
        });

        // Notification au stagiaire
        const notificationStagiaire = new Notification({
            user: stage.stagiaire._id,
            type: 'Stage rejet√©',
            message: `Votre stage a √©t√© rejet√© par ${stage.encadreur.prenom} ${stage.encadreur.nom}. Motif: ${motifRejet}`
        });
        await notificationStagiaire.save();

        // Notification √† l'admin RH
        const adminRH = await User.findOne({ role: 'ADMIN_RH' });
        if (adminRH) {
            const notificationAdmin = new Notification({
                user: adminRH._id,
                type: 'Stage rejet√©',
                message: `Le stage de ${stage.stagiaire.prenom} ${stage.stagiaire.nom} a √©t√© rejet√© par ${stage.encadreur.prenom} ${stage.encadreur.nom}. Motif: ${motifRejet}`
            });
            await notificationAdmin.save();
        }

        console.log(`‚úÖ Stage ${stageId} rejet√© avec succ√®s`);

        res.status(200).json({
            success: true,
            message: "Stagiaire rejet√© avec succ√®s",
            stage: {
                _id: stage._id,
                stagiaire: stage.stagiaire,
                encadreur: stage.encadreur,
                statut: stage.statut,
                confirmationEncadreur: stage.confirmationEncadreur
            }
        });

    } catch (error) {
        console.error("‚ùå Erreur rejet stagiaire:", error);
        res.status(500).json({
            success: false,
            message: "Erreur lors du rejet du stagiaire",
            error: error.message
        });
    }
};

// üîπ R√©cup√©rer les stagiaires en attente de confirmation
exports.getStagiairesEnAttente = async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est un salari√©
        if (req.user.role !== 'SALARIE') {
            return res.status(403).json({
                success: false,
                message: "Acc√®s r√©serv√© aux salari√©s"
            });
        }

        const stages = await Stage.find({
            encadreur: req.user.id,
            'confirmationEncadreur.statut': 'en_attente',
            statut: 'En attente'
        })
        .populate('stagiaire', 'nom prenom email ecole filiere niveau telephone poste dureeStage')
        .sort({ createdAt: -1 });

        console.log(`üìã ${stages.length} stages en attente pour l'encadreur ${req.user.id}`);

        res.status(200).json({
            success: true,
            count: stages.length,
            stages
        });

    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration stagiaires en attente:", error);
        res.status(500).json({
            success: false,
            message: "Erreur lors de la r√©cup√©ration des stagiaires en attente",
            error: error.message
        });
    }
};

// üîπ R√©cup√©rer l'historique des confirmations/rejets
exports.getHistoriqueConfirmations = async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est un salari√©
        if (req.user.role !== 'SALARIE') {
            return res.status(403).json({
                success: false,
                message: "Acc√®s r√©serv√© aux salari√©s"
            });
        }

        const stages = await Stage.find({
            encadreur: req.user.id,
            'confirmationEncadreur.statut': { $in: ['confirm√©', 'rejet√©'] }
        })
        .populate('stagiaire', 'nom prenom email ecole filiere niveau')
        .sort({ 'confirmationEncadreur.dateConfirmation': -1 });

        res.status(200).json({
            success: true,
            count: stages.length,
            stages
        });

    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration historique:", error);
        res.status(500).json({
            success: false,
            message: "Erreur lors de la r√©cup√©ration de l'historique",
            error: error.message
        });
    }
};

// üîπ R√©cup√©rer les stagiaires encadr√©s par un salari√© (stages confirm√©s)
exports.getMesStagiaires = async (req, res) => {
    try {
        // V√©rifier que l'utilisateur est un salari√©
        if (req.user.role !== 'SALARIE') {
            return res.status(403).json({
                success: false,
                message: "Acc√®s r√©serv√© aux salari√©s"
            });
        }

        const stages = await Stage.find({
            encadreur: req.user.id,
            'confirmationEncadreur.statut': 'confirm√©',
            statut: 'Confirm√©'
        })
        .populate('stagiaire', 'nom prenom email ecole filiere niveau telephone poste dureeStage')
        .sort({ 'confirmationEncadreur.dateConfirmation': -1 });

        console.log(`üë• ${stages.length} stagiaires confirm√©s pour l'encadreur ${req.user.id}`);

        res.status(200).json({
            success: true,
            count: stages.length,
            stages: stages.map(stage => ({
                ...stage.toObject(),
                stagiaire: stage.stagiaire,
                dateConfirmation: stage.confirmationEncadreur.dateConfirmation
            }))
        });

    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration des stagiaires encadr√©s:", error);
        res.status(500).json({
            success: false,
            message: "Erreur lors de la r√©cup√©ration des stagiaires encadr√©s",
            error: error.message
        });
    }
};