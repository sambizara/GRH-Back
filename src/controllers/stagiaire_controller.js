// controllers/stagiaire_controller.js
const User = require('../models/user_model');
const Stage = require('../models/stage_model');
const Notification = require('../models/notification_model');

// üîπ R√©cup√©rer les stagiaires en attente de confirmation (pour les salari√©s)
exports.getStagiairesEnAttente = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est un salari√©
    if (req.user.role !== 'SALARIE') {
      return res.status(403).json({
        success: false,
        message: "Acc√®s r√©serv√© aux salari√©s"
      });
    }

    // R√©cup√©rer le poste du salari√©
    const salarie = await User.findById(req.user.id);
    
    // Trouver les stagiaires avec le m√™me poste et en attente de confirmation
    const stagiaires = await User.find({
      role: 'STAGIAIRE',
      poste: salarie.poste,
      statutConfirmation: 'en_attente',
      actif: true
    })
    .select('nom prenom email ecole filiere niveau dureeStage poste telephone dateNaissance adresse')
    .sort({ createdAt: -1 });

    res.status(200).json({
      success: true,
      count: stagiaires.length,
      stagiaires
    });

  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration stagiaires en attente:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des stagiaires en attente",
      error: error.message
    });
  }
};

// üîπ Confirmer un stagiaire et cr√©er son stage
exports.confirmerStagiaire = async (req, res) => {
  try {
    const { stagiaireId } = req.params;
    const { theme, competencesRequises, objectifs, dateDebut, dateFin, commentaires } = req.body;

    // V√©rifier que l'utilisateur est un salari√©
    if (req.user.role !== 'SALARIE') {
      return res.status(403).json({
        success: false,
        message: "Acc√®s r√©serv√© aux salari√©s"
      });
    }

    // V√©rifier les donn√©es obligatoires
    if (!theme || !dateDebut || !dateFin) {
      return res.status(400).json({
        success: false,
        message: "Le th√®me, la date de d√©but et la date de fin sont obligatoires"
      });
    }

    // V√©rifier les dates
    if (new Date(dateDebut) >= new Date(dateFin)) {
      return res.status(400).json({
        success: false,
        message: "La date de fin doit √™tre post√©rieure √† la date de d√©but"
      });
    }

    // R√©cup√©rer le stagiaire
    const stagiaire = await User.findById(stagiaireId);
    if (!stagiaire || stagiaire.role !== 'STAGIAIRE') {
      return res.status(404).json({
        success: false,
        message: "Stagiaire non trouv√©"
      });
    }

    // R√©cup√©rer le salari√©
    const salarie = await User.findById(req.user.id);

    // V√©rifier que le stagiaire a le m√™me poste que le salari√©
    if (stagiaire.poste !== salarie.poste) {
      return res.status(403).json({
        success: false,
        message: "Vous ne pouvez encadrer que les stagiaires de votre poste"
      });
    }

    // V√©rifier que le stagiaire est en attente de confirmation
    if (stagiaire.statutConfirmation !== 'en_attente') {
      return res.status(400).json({
        success: false,
        message: "Ce stagiaire a d√©j√† √©t√© trait√©"
      });
    }

    // V√©rifier s'il n'y a pas d√©j√† un stage pour ce stagiaire
    const stageExistant = await Stage.findOne({
      stagiaire: stagiaireId,
      statut: { $in: ['En attente', 'Confirm√©', 'En cours'] }
    });

    if (stageExistant) {
      return res.status(400).json({
        success: false,
        message: "Ce stagiaire a d√©j√† un stage en cours"
      });
    }

    // Mettre √† jour le statut du stagiaire
    stagiaire.statutConfirmation = 'confirm√©';
    stagiaire.encadreur = req.user.id;
    stagiaire.dateConfirmation = new Date();
    stagiaire.commentairesEncadreur = commentaires;
    await stagiaire.save();

    // Cr√©er le stage
    const nouveauStage = new Stage({
      stagiaire: stagiaireId,
      encadreur: req.user.id,
      sujet: theme,
      theme: theme,
      competencesRequises: competencesRequises || [],
      objectifs: objectifs || [],
      dateDebut,
      dateFin,
      statut: 'Confirm√©',
      confirmationEncadreur: {
        statut: 'confirm√©',
        dateConfirmation: new Date(),
        commentaires: commentaires
      }
    });

    await nouveauStage.save();

    // Populer les donn√©es pour la r√©ponse
    const stagePopule = await Stage.findById(nouveauStage._id)
      .populate('stagiaire', 'nom prenom email ecole filiere niveau poste dureeStage')
      .populate('encadreur', 'nom prenom email role matricule');

    // Notification au stagiaire
    const notificationStagiaire = new Notification({
      user: stagiaireId,
      type: 'Stage confirm√©',
      message: `Votre stage a √©t√© confirm√© par ${salarie.prenom} ${salarie.nom}. Th√®me: ${theme}`
    });
    await notificationStagiaire.save();

    res.status(200).json({
      success: true,
      message: "Stagiaire confirm√© et stage cr√©√© avec succ√®s",
      stage: stagePopule
    });

  } catch (error) {
    console.error("‚ùå Erreur confirmation stagiaire:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la confirmation du stagiaire",
      error: error.message
    });
  }
};

// üîπ Rejeter un stagiaire
exports.rejeterStagiaire = async (req, res) => {
  try {
    const { stagiaireId } = req.params;
    const { motifRejet, commentaires } = req.body;

    if (!motifRejet) {
      return res.status(400).json({
        success: false,
        message: "Le motif du rejet est obligatoire"
      });
    }

    // V√©rifier que l'utilisateur est un salari√©
    if (req.user.role !== 'SALARIE') {
      return res.status(403).json({
        success: false,
        message: "Acc√®s r√©serv√© aux salari√©s"
      });
    }

    // R√©cup√©rer le stagiaire
    const stagiaire = await User.findById(stagiaireId);
    if (!stagiaire || stagiaire.role !== 'STAGIAIRE') {
      return res.status(404).json({
        success: false,
        message: "Stagiaire non trouv√©"
      });
    }

    // R√©cup√©rer le salari√©
    const salarie = await User.findById(req.user.id);

    // V√©rifier que le stagiaire a le m√™me poste que le salari√©
    if (stagiaire.poste !== salarie.poste) {
      return res.status(403).json({
        success: false,
        message: "Vous ne pouvez traiter que les stagiaires de votre poste"
      });
    }

    // V√©rifier que le stagiaire est en attente de confirmation
    if (stagiaire.statutConfirmation !== 'en_attente') {
      return res.status(400).json({
        success: false,
        message: "Ce stagiaire a d√©j√† √©t√© trait√©"
      });
    }

    // Mettre √† jour le statut du stagiaire
    stagiaire.statutConfirmation = 'rejet√©';
    stagiaire.dateConfirmation = new Date();
    stagiaire.motifRejet = motifRejet;
    stagiaire.commentairesEncadreur = commentaires;
    await stagiaire.save();

    // Notification au stagiaire
    const notificationStagiaire = new Notification({
      user: stagiaireId,
      type: 'Candidature rejet√©e',
      message: `Votre candidature pour le poste ${stagiaire.poste} a √©t√© rejet√©e par ${salarie.prenom} ${salarie.nom}. Motif: ${motifRejet}`
    });
    await notificationStagiaire.save();

    // Notification √† l'admin RH
    const adminRH = await User.findOne({ role: 'ADMIN_RH' });
    if (adminRH) {
      const notificationAdmin = new Notification({
        user: adminRH._id,
        type: 'Stagiaire rejet√©',
        message: `Le stagiaire ${stagiaire.prenom} ${stagiaire.nom} a √©t√© rejet√© par ${salarie.prenom} ${salarie.nom} pour le poste ${stagiaire.poste}. Motif: ${motifRejet}`
      });
      await notificationAdmin.save();
    }

    res.status(200).json({
      success: true,
      message: "Stagiaire rejet√© avec succ√®s"
    });

  } catch (error) {
    console.error("‚ùå Erreur rejet stagiaire:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors du rejet du stagiaire",
      error: error.message
    });
  }
};

// üîπ R√©cup√©rer l'historique des confirmations/rejets
exports.getHistoriqueConfirmations = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est un salari√©
    if (req.user.role !== 'SALARIE') {
      return res.status(403).json({
        success: false,
        message: "Acc√®s r√©serv√© aux salari√©s"
      });
    }

    // R√©cup√©rer le salari√©
    const salarie = await User.findById(req.user.id);

    // Trouver les stagiaires trait√©s par ce salari√©
    const stagiaires = await User.find({
      role: 'STAGIAIRE',
      poste: salarie.poste,
      statutConfirmation: { $in: ['confirm√©', 'rejet√©'] },
      $or: [
        { encadreur: req.user.id },
        { dateConfirmation: { $exists: true } }
      ]
    })
    .select('nom prenom email ecole filiere niveau dureeStage poste statutConfirmation dateConfirmation motifRejet commentairesEncadreur')
    .sort({ dateConfirmation: -1 });

    res.status(200).json({
      success: true,
      count: stagiaires.length,
      stagiaires
    });

  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration historique:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration de l'historique",
      error: error.message
    });
  }
};

// üîπ R√©cup√©rer mes stagiaires encadr√©s (pour les salari√©s)
exports.getMesStagiairesEncadres = async (req, res) => {
  try {
    // V√©rifier que l'utilisateur est un salari√©
    if (req.user.role !== 'SALARIE') {
      return res.status(403).json({
        success: false,
        message: "Acc√®s r√©serv√© aux salari√©s"
      });
    }

    // Trouver les stagiaires confirm√©s par ce salari√©
    const stagiaires = await User.find({
      role: 'STAGIAIRE',
      encadreur: req.user.id,
      statutConfirmation: 'confirm√©',
      actif: true
    })
    .select('nom prenom email ecole filiere niveau dureeStage poste dateConfirmation')
    .sort({ dateConfirmation: -1 });

    res.status(200).json({
      success: true,
      count: stagiaires.length,
      stagiaires
    });

  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration stagiaires encadr√©s:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des stagiaires encadr√©s",
      error: error.message
    });
  }
};