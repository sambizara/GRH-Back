// controllers/contrat_notification_controller.js
const ContratNotificationService = require("../models/notification_service");

// üîπ R√©cup√©rer les d√©tails des contrats arrivant √† expiration
exports.getExpiringContrats = async (req, res) => {
  try {
    console.log("üîç Demande de contrats expirants re√ßue");
    const contratsExpiring = await ContratNotificationService.getExpiringContratsDetails();
    
    res.status(200).json({
      success: true,
      contratsExpiring
    });
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration contrats expirants:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des contrats expirants",
      error: error.message
    });
  }
};

// üîπ R√©cup√©rer les statistiques d'expiration
exports.getExpirationStats = async (req, res) => {
  try {
    console.log("üìä Demande de statistiques expiration re√ßue");
    const stats = await ContratNotificationService.getContratExpirationStats();
    
    res.status(200).json({
      success: true,
      stats
    });
  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration statistiques:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la r√©cup√©ration des statistiques",
      error: error.message
    });
  }
};

// üîπ V√©rifier et cr√©er les notifications d'expiration
exports.checkAndCreateNotifications = async (req, res) => {
  try {
    console.log("üîî Demande de v√©rification notifications re√ßue");
    const notificationsCreated = await ContratNotificationService.checkAndCreateExpirationNotifications();
    
    res.status(200).json({
      success: true,
      message: `${notificationsCreated.length} notification(s) cr√©√©e(s)`,
      notificationsCreated
    });
  } catch (error) {
    console.error("‚ùå Erreur cr√©ation notifications:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la cr√©ation des notifications",
      error: error.message
    });
  }
};

// üîπ Cr√©er une notification pour l'admin
exports.createAdminNotification = async (req, res) => {
  try {
    const adminUserId = req.user.id; // L'admin connect√©
    console.log(`üë®‚Äçüíº Demande notification admin pour: ${adminUserId}`);
    
    const notification = await ContratNotificationService.createAdminExpirationNotification(adminUserId);
    
    if (notification) {
      res.status(201).json({
        success: true,
        message: "Notification admin cr√©√©e",
        notification
      });
    } else {
      res.status(200).json({
        success: true,
        message: "Aucun contrat n'arrive √† expiration",
        notification: null
      });
    }
  } catch (error) {
    console.error("‚ùå Erreur cr√©ation notification admin:", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la cr√©ation de la notification admin",
      error: error.message
    });
  }
};