// services/matchingService.js
const { Stagiaire, Salarie } = require('../models/user_model');
const Stage = require('../models/stage_model');
const Notification = require('../models/notification_model');

exports.autoMatchStagiaire = async (stagiaireId) => {
    try {
        console.log(`üîÑ D√©but matching automatique pour stagiaire: ${stagiaireId}`);
        
        const stagiaire = await Stagiaire.findById(stagiaireId);
        if (!stagiaire) {
            throw new Error('Stagiaire non trouv√©');
        }

        console.log(`üîç Recherche salari√©s avec poste: ${stagiaire.poste}`);
        
        // Trouver les salari√©s avec le m√™me poste
        const salariesCompatibles = await Salarie.find({
            poste: stagiaire.poste,
            actif: true
        });

        console.log(`‚úÖ ${salariesCompatibles.length} salari√©(s) compatible(s) trouv√©(s)`);

        if (salariesCompatibles.length === 0) {
            console.log('‚ö†Ô∏è Aucun salari√© compatible trouv√©');
            return 0;
        }

        // Cr√©er des stages "propos√©s" pour chaque salari√© compatible
        const stagesPromises = salariesCompatibles.map(async (salarie) => {
            // Calcul des dates automatiques
            const dateDebut = new Date();
            const dateFin = new Date(dateDebut);
            dateFin.setMonth(dateFin.getMonth() + stagiaire.dureeStage);

            const stage = new Stage({
                stagiaire: stagiaireId,
                encadreur: salarie._id,
                sujet: `Stage ${stagiaire.poste} - ${stagiaire.filiere}`,
                dateDebut: dateDebut,
                dateFin: dateFin,
                statut: 'Propos√©',
                confirmationEncadreur: {
                    statut: 'en_attente'
                }
            });

            await stage.save();

            // Notification au salari√©
            const notification = new Notification({
                user: salarie._id,
                type: 'Nouveau stagiaire propos√©',
                message: `Un nouveau stagiaire (${stagiaire.prenom} ${stagiaire.nom}) a √©t√© propos√© pour votre √©quipe. Poste: ${stagiaire.poste}, √âcole: ${stagiaire.ecole}, Dur√©e: ${stagiaire.dureeStage} mois`,
                lien: `/salarie/gestion-stagiaires`
            });
            await notification.save();

            console.log(`üìß Notification envoy√©e √† ${salarie.prenom} ${salarie.nom}`);

            return stage;
        });

        await Promise.all(stagesPromises);
        
        console.log(`üéØ ${salariesCompatibles.length} stage(s) propos√©(s) cr√©√©(s)`);
        return salariesCompatibles.length;

    } catch (error) {
        console.error('‚ùå Erreur matching automatique:', error);
        throw error;
    }
};