const Conge = require("../models/conge_model");
const SoldeConge = require("../models/soldeConge_model");

// Cr√©er une demande de cong√©
exports.createConge = async (req, res) => {
    try {
        const { typeConge, dateDebut, dateFin, motif } = req.body;

        if (new Date(dateDebut) >= new Date(dateFin)) {
            return res.status(400).json({ message: "La date de fin doit √™tre apr√®s la date de d√©but" });
        }

        const nouveauConge = new Conge({
            user: req.user.id,
            typeConge,
            dateDebut,
            dateFin,
            motif
        });

        await nouveauConge.save();
        await nouveauConge.populate('user', 'nom prenom email');
        
        res.status(201).json({ 
            message: "Demande de cong√© cr√©√©e avec succ√®s", 
            conge: nouveauConge 
        });
    } catch (error) {
        console.error("‚ùå Erreur cr√©ation cong√©:", error);
        res.status(500).json({ 
            message: "Erreur serveur", 
            error: error.message 
        });
    }
};

// Voir mes cong√©s (SALARIE) - ‚≠ê CORRECTION: structure fixe
exports.getMesConges = async (req, res) => {
    try {
        console.log("üîÑ getMesConges pour user:", req.user.id);
        
        const conges = await Conge.find({ user: req.user.id })
            .populate('user', 'nom prenom email')
            .sort({ createdAt: -1 });

        console.log(`üìä ${conges.length} cong√©(s) trouv√©(s)`);

        // R√©cup√©rer les soldes
        let soldeConge = await SoldeConge.findOne({ user: req.user.id });
        if (!soldeConge) {
            soldeConge = new SoldeConge({ user: req.user.id });
            await soldeConge.save();
        }

        const soldes = {
            annuel: soldeConge.getSoldeRestant('Annuel'),
            maladie: soldeConge.getSoldeRestant('Maladie'),
            maternite: soldeConge.getSoldeRestant('Maternit√©'),
            paternite: soldeConge.getSoldeRestant('Paternit√©')
        };

        res.status(200).json({ 
            success: true,
            conges, 
            soldes 
        });
        
    } catch (error) {
        console.error("‚ùå Erreur getMesConges:", error);
        res.status(500).json({ 
            success: false,
            message: "Erreur lors du chargement des cong√©s", 
            error: error.message 
        });
    }
};

// Voir toutes les demandes de cong√© (ADMIN_RH) - ‚≠ê CORRECTION
exports.getAllConges = async (req, res) => {
    try {
        console.log("üîÑ getAllConges - ADMIN_RH");
        
        const conges = await Conge.find()
            .populate({
                path: 'user',
                select: 'nom prenom email role service poste',
                populate: {
                    path: 'service',
                    select: 'nomService'
                }
            })
            .sort({ createdAt: -1 });

        console.log(`üìä ${conges.length} cong√©(s) trouv√©(s) pour l'admin`);

        res.status(200).json({
            success: true,
            conges
        });
    } catch (error) {
        console.error("‚ùå Erreur getAllConges:", error);
        res.status(500).json({ 
            success: false,
            message: "Erreur lors du chargement de tous les cong√©s", 
            error: error.message 
        });
    }
};

// Valider ou refuser une demande de cong√© (ADMIN_RH)
exports.updateCongeStatus = async (req, res) => {
    try {
        const { statut } = req.body;
        
        if (!['Approuv√©', 'Rejet√©'].includes(statut)) {
            return res.status(400).json({ message: "Statut invalide" });
        }

        const conge = await Conge.findByIdAndUpdate(
            req.params.id, 
            { statut },
            { new: true }
        ).populate({
            path: 'user',
            select: 'nom prenom email role service poste',
            populate: {
                path: 'service',
                select: 'nomService'
            }
        });
        
        if (!conge) {
            return res.status(404).json({ message: "Demande de cong√© non trouv√©e" });
        }

        res.status(200).json({ 
            message: `Demande de cong√© ${statut.toLowerCase()}`, 
            conge 
        });
    } catch (error) {
        console.error("‚ùå Erreur mise √† jour statut cong√©:", error);
        res.status(500).json({ 
            message: "Erreur serveur", 
            error: error.message 
        });
    }
};

// R√©cup√©rer les soldes
exports.getMesSoldes = async (req, res) => {
    try {
        let soldeConge = await SoldeConge.findOne({ user: req.user.id });
        
        if (!soldeConge) {
            soldeConge = new SoldeConge({ user: req.user.id });
            await soldeConge.save();
        }

        const soldes = {
            annuel: soldeConge.getSoldeRestant('Annuel'),
            maladie: soldeConge.getSoldeRestant('Maladie'),
            maternite: soldeConge.getSoldeRestant('Maternit√©'),
            paternite: soldeConge.getSoldeRestant('Paternit√©')
        };

        res.status(200).json(soldes);
    } catch (error) {
        console.error("‚ùå Erreur r√©cup√©ration soldes:", error);
        res.status(500).json({ 
            message: "Erreur serveur", 
            error: error.message 
        });
    }
};

// Supprimer une demande de cong√©
exports.deleteConge = async (req, res) => {
    try {
        const conge = await Conge.findById(req.params.id);
        
        if (!conge) {
            return res.status(404).json({ message: "Demande de cong√© non trouv√©e" });
        }

        if (conge.user.toString() !== req.user.id && req.user.role !== 'ADMIN_RH') {
            return res.status(403).json({ message: "Acc√®s refus√©" });
        }

        await Conge.findByIdAndDelete(req.params.id);
        
        res.status(200).json({ message: "Demande de cong√© supprim√©e avec succ√®s" });
    } catch (error) {
        console.error("‚ùå Erreur suppression cong√©:", error);
        res.status(500).json({ 
            message: "Erreur serveur", 
            error: error.message 
        });
    }
};